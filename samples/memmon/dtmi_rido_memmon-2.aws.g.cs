//  <auto-generated/> 

using MQTTnet.Client;
using MQTTnet.Extensions.MultiCloud;
using MQTTnet.Extensions.MultiCloud.AwsIoTClient;

namespace dtmi_rido_memmon.aws;

public class memmon : AwsMqttClient, Imemmon
{
    public IReadOnlyProperty<DateTime> Property_started { get; set; }
    public IWritableProperty<bool> Property_enabled { get; set; }
    public IWritableProperty<int> Property_interval { get; set; }
    public ITelemetry<double> Telemetry_workingSet { get; set; }
    public ITelemetry<double> Telemetry_managedMemory { get; set; }
    public ICommand<DiagnosticsMode, Dictionary<string, string>> Command_getRuntimeStats { get; set; }

    public string InitialState { get; set; }

    public ICommand<int, bool> Command_isPrime { get; set; }
    public ICommand<int> Command_malloc { get; set; }
    public ICommand Command_free { get; set; }

    internal memmon(IMqttClient c) : base(c)
    {
        Property_started = new ReadOnlyProperty<DateTime>(c, "started");
        Property_interval = new WritableProperty<int>(c, "interval");
        Property_enabled = new WritableProperty<bool>(c, "enabled");
        Telemetry_workingSet = new MQTTnet.Extensions.MultiCloud.BrokerIoTClient.Telemetry<double>(c, "workingSet");
        Telemetry_managedMemory = new MQTTnet.Extensions.MultiCloud.BrokerIoTClient.Telemetry<double>(c, "managedMemory");
        Command_getRuntimeStats = new MQTTnet.Extensions.MultiCloud.BrokerIoTClient.Command<DiagnosticsMode, Dictionary<string, string>>(c, "getRuntimeStats");
        Command_isPrime = new MQTTnet.Extensions.MultiCloud.BrokerIoTClient.Command<int, bool>(c, "isPrime");
        Command_malloc = new MQTTnet.Extensions.MultiCloud.BrokerIoTClient.Command<int>(c, "malloc");
        Command_free = new MQTTnet.Extensions.MultiCloud.BrokerIoTClient.Command(c, "free");
    }
}